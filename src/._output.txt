File Name: authMiddleware.ts
import { Request, Response, NextFunction } from "express";

export const authMiddleware = (req: Request, res: Response, next: NextFunction): void => {
  console.log(`Auth Middleware: Request authenticated for ${req.method} ${req.url}`);
  next();
};

-----------------


File Name: .env.produnction
PORT=5001

-----------------


File Name: db.ts
import { Database, open } from "sqlite";
import sqlite3 from "sqlite3";

let dbInstance: Database | null = null;

export async function openDb(): Promise<Database> {
  if (dbInstance) {
    return dbInstance;
  }

  console.log("Opening in-memory database...");
  dbInstance = await open({
    filename: ":memory:",
    driver: sqlite3.Database,
  });
  console.log("Database opened successfully.");

  await dbInstance.exec(`
    CREATE TABLE IF NOT EXISTS memos (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      content TEXT
    )
  `);
  console.log("Database initialized successfully.");

  return dbInstance;
}

-----------------


File Name: app.ts
import express from "express";
import cors from "cors";
import memoRoutes from "./routes/memoRoutes";
import healthRoutes from "./routes/healthRoutes";
import { authMiddleware } from "./middleware/authMiddleware";

const app = express();

app.use(cors());
app.use(express.json());
app.use(authMiddleware);

app.use("/api", memoRoutes);
app.use("/", healthRoutes);

export default app;

-----------------


File Name: memoModel.ts
export interface Memo {
  id: number;
  content: string;
}

-----------------


File Name: .env
PORT=5001

-----------------


File Name: ._output.txt
File Name: authMiddleware.ts
import { Request, Response, NextFunction } from "express";

export const authMiddleware = (req: Request, res: Response, next: NextFunction): void => {
  console.log(`Auth Middleware: Request authenticated for ${req.method} ${req.url}`);
  next();
};

-----------------


File Name: .env.produnction
PORT=5001

-----------------


File Name: db.ts
import { Database, open } from "sqlite";
import sqlite3 from "sqlite3";

let dbInstance: Database | null = null;

export async function openDb(): Promise<Database> {
  if (dbInstance) {
    return dbInstance;
  }

  console.log("Opening in-memory database...");
  dbInstance = await open({
    filename: ":memory:",
    driver: sqlite3.Database,
  });
  console.log("Database opened successfully.");

  await dbInstance.exec(`
    CREATE TABLE IF NOT EXISTS memos (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      content TEXT
    )
  `);
  console.log("Database initialized successfully.");

  return dbInstance;
}

-----------------


File Name: app.ts
import express from "express";
import cors from "cors";
import memoRoutes from "./routes/memoRoutes";
import healthRoutes from "./routes/healthRoutes";
import { authMiddleware } from "./middleware/authMiddleware";

const app = express();

app.use(cors());
app.use(express.json());
app.use(authMiddleware);

app.use("/api", memoRoutes);
app.use("/", healthRoutes);

export default app;

-----------------


File Name: memoModel.ts
export interface Memo {
  id: number;
  content: string;
}

-----------------


File Name: .env
PORT=5001

-----------------



-----------------


File Name: healthController.ts
import { Request, Response } from "express";
import { openDb } from "../config/db";

export const healthCheck = async (req: Request, res: Response): Promise<void> => {
  try {
    const db = await openDb();
    await db.get("SELECT 1");
    res.status(200).send({ status: "ok", message: "Server is healthy" });
  } catch (error) {
    const errorMessage = (error as Error).message;
    res.status(500).send({ status: "error", message: "Database connection failed", error: errorMessage });
  }
};

-----------------


File Name: memoController.ts
import { Request, Response } from "express";
import { openDb } from "../config/db";

export const getAllMemos = async (
  req: Request,
  res: Response,
): Promise<void> => {
  const db = await openDb();
  const memos = await db.all("SELECT * FROM memos");
  res.json(memos);
};

export const createMemo = async (
  req: Request,
  res: Response,
): Promise<void> => {
  const { content } = req.body;
  if (!content) {
    res.status(400).send({ error: "Content is required" });
    return;
  }
  const db = await openDb();
  const result = await db.run(
    "INSERT INTO memos (content) VALUES (?)",
    content,
  );
  res.status(201).json({
    id: result.lastID,
    content,
  });
};

-----------------


File Name: server.ts
import app from "./app";

async function startServer() {
  try {
    const PORT = process.env.PORT || 5001;
    app.listen(PORT, () => {
      console.log(`Server is running on http://localhost:${PORT}`);
    });
  } catch (error) {
    console.error("Failed to initialize database", error);
    process.exit(1);
  }
}

startServer();

-----------------


File Name: memoRoutes.ts
import { Router } from "express";
import { getAllMemos, createMemo } from "../controllers/memoController";

const router = Router();

router.get("/memos", getAllMemos);
router.post("/memos", createMemo);

export default router;

-----------------


File Name: healthRoutes.ts
import { Router } from "express";
import { healthCheck } from "../controllers/healthController";

const router = Router();

router.get("/health", healthCheck);

export default router;

-----------------


